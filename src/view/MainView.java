/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.CalculateRMap;
import controller.HDRConstruction;
import controller.GhostDetection;
import controller.ToneMapping;
import controller.CameraResponse;
import com.drew.imaging.ImageMetadataReader;
import com.drew.imaging.ImageProcessingException;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.MetadataException;
import com.drew.metadata.Tag;
import com.drew.metadata.exif.ExifDirectory;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultCaret;
import static javax.swing.text.DefaultCaret.ALWAYS_UPDATE;
import model.*;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author Hans CK
 */
public class MainView extends javax.swing.JFrame {

    private static ImageSet set;
    private CameraResponse camera;
    private Mat hdri;
    private RadianceMap hdrMap;
    protected static ImageIcon[] icon;
    private int count = 1;
    private int resCount = 1;

    /**
     * Creates new form GUI
     */
    public MainView() throws IOException {
        initComponents();
        setTitle("HDRI Creator");
        sliderBrightness.setMinimum(0);
        sliderBrightness.setMaximum(100);
        sliderBrightness.setValue(18);
        DefaultCaret caret = (DefaultCaret) textLog.getCaret();
        caret.setUpdatePolicy(ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonLoad = new javax.swing.JButton();
        sliderBrightness = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        buttonCreate = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonCRF = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textLog = new javax.swing.JTextArea();
        labelC = new javax.swing.JLabel();
        labelA = new javax.swing.JLabel();
        labelB = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelHDRI = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel1.setText("Citra A :");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel2.setText("Citra B :");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel3.setText("Citra C :");

        buttonLoad.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        buttonLoad.setText("LOAD LDRI");
        buttonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });

        sliderBrightness.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        sliderBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrightnessStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel4.setText("Brightness Key (a) :");

        buttonCreate.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        buttonCreate.setText("CREATE HDRI");
        buttonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateActionPerformed(evt);
            }
        });

        buttonSave.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        buttonSave.setText("SAVE");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonCRF.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        buttonCRF.setText("SHOW CRF");
        buttonCRF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCRFActionPerformed(evt);
            }
        });

        textLog.setColumns(20);
        textLog.setRows(5);
        jScrollPane2.setViewportView(textLog);

        labelC.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        labelA.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        labelB.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel5.setText("HDRI CREATOR");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(buttonCRF)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonSave))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(buttonLoad))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(buttonCreate)))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(sliderBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                        .addGap(28, 28, 28)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelB, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel3))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addComponent(labelHDRI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(buttonLoad)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonCreate)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCRF)
                            .addComponent(buttonSave)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelA, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelHDRI, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void setSet(double[] expTime) {
        for (int i = 0; i < 3; i++) {
            set.setExposure(i, expTime[i]);
        }
    }

    public void reset() {
        labelA.setIcon(null);
        labelB.setIcon(null);
        labelC.setIcon(null);
        labelHDRI.setIcon(null);
        textLog.setText(null);
        sliderBrightness.setValue(18);
        hdri = null;
        camera = null;
        hdrMap = null;
    }

    private File[] showOpenDialog() {

        JFileChooser chooser = new JFileChooser();

        FileFilter ff = new javax.swing.filechooser.FileFilter() {
            public boolean accept(File f) {
                String name = f.getName().toLowerCase();

                return f.isDirectory() || name.endsWith(".jpg") || name.endsWith(".png") || name.endsWith(".bmp");
            }

            public String getDescription() {
                return "";
            }
        };
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(ff);
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(null);

        File[] files = chooser.getSelectedFiles();

        return files;
    }

    private File showSaveDialog() {

        JFileChooser chooser = new JFileChooser();
        chooser.showSaveDialog(null);
        File file = chooser.getSelectedFile();
        return file;
    }

    private void showHDRI() {
        Mat resizedImage = new Mat();
        Size size = new Size(labelHDRI.getWidth(), labelHDRI.getHeight());
        Imgproc.resize(hdri, resizedImage, size);
        String str = "res/result" + resCount + ".jpg";
        Imgcodecs.imwrite(str, resizedImage);
        ImageIcon iconRes = new ImageIcon(str);
        labelHDRI.setIcon(iconRes);
        resCount++;
    }

    private void buttonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateActionPerformed
        // TODO add your handling code here:

        if (hdri == null) {
            // Create Joint PDF
            JointPDF jointPDF1 = new JointPDF(set.getM(1), set.getM(0));
            JointPDF jointPDF2 = new JointPDF(set.getM(1), set.getM(2));
            
            ArrayList<JointPDF> listPDF = new ArrayList();
            listPDF.add(jointPDF1);
            listPDF.add(jointPDF2);
            textLog.append("Finish Calculate JointPDF\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Calculate JointPDF");

            // Ghost Pixel Detection
            int[][] ghost1 = GhostDetection.detect(set.getM(1), set.getM(0), jointPDF1);
            int[][] ghost2 = GhostDetection.detect(set.getM(1), set.getM(2), jointPDF2);
            ArrayList<int[][]> listGhost = new ArrayList();
            listGhost.add(ghost1);
            listGhost.add(ghost2);
            textLog.append("Finish Estimate Ghost Region\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Estimate Ghost Region");

            // Calculate Camera Response Function Curve
            camera = new CameraResponse(set);
            textLog.append("Finish Calculate CRF\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Calculate CRF");

            // Calculate RMap for each of images & combine RMap
            CalculateRMap calcRMap = new CalculateRMap(camera.getSet(), camera, listGhost);
            textLog.append("Finish Calculate Radiance Map for Each Image\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Calculate Radiance Map for Each Image");

            // Calculate Final HDRI Radiance Map
            HDRConstruction hdr = new HDRConstruction(calcRMap.getSet(), listPDF);
            hdrMap = null;
            hdrMap = hdr.constructHDR();
            textLog.append("Finish Construct Final Radiance Map\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Construct Final Radiance Map");

            // Tone Mapping
            ToneMapping tm = new ToneMapping(set, hdrMap, sliderBrightness.getValue());
            hdri = tm.reinhardTMO();
            textLog.append("Finish Tone Mapping\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Tone Mapping");

            // Show HDRI 
            showHDRI();
        } else {
            // Re-Tone Mapping
            ToneMapping tm = new ToneMapping(set, hdrMap, sliderBrightness.getValue());
            hdri = tm.reinhardTMO();
            textLog.append("Finish Re-Tone Mapping\n");
            textLog.update(textLog.getGraphics());
            System.out.println("Finish Re-Tone Mapping");
            showHDRI();
        }
    }//GEN-LAST:event_buttonCreateActionPerformed

    private double checkExposureTime(File file) throws MetadataException, ImageProcessingException {

        Metadata metadata = ImageMetadataReader.readMetadata(file);
        Directory directory = metadata.getDirectory(ExifDirectory.class);
        double time = 0;

        if (directory != null) {
            if (directory.getString(ExifDirectory.TAG_EXPOSURE_TIME) != null) {
                String expTime = directory.getString(ExifDirectory.TAG_EXPOSURE_TIME);

                if (expTime.contains("/")) {
                    String[] exp = expTime.split("/");
                    time = Double.parseDouble(exp[0]) / Double.parseDouble(exp[1]);
                } else {
                    time = Double.parseDouble(expTime);
                }
            }
        }
        return time;
    }

    private String getExtension(String fileName) {
        String extension = "";

        int i = fileName.lastIndexOf('.');
        if (i > 0) {
            extension = fileName.substring(i + 1);
        }
        return extension;
    }

    private void buttonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed
        // TODO add your handling code here:

        File[] file = showOpenDialog();
        Metadata metadata;
        boolean status = false;

        this.set = new ImageSet();
        if (count != 1) {
            reset();
        }
        String extension = getExtension(file[0].getName());

        for (int i = 0; i < 3; i++) {
            set.setM(i, Imgcodecs.imread(file[i].getAbsolutePath(), Imgcodecs.CV_LOAD_IMAGE_COLOR));
            double expTime = 0;
            if (extension.equalsIgnoreCase("jpg")) {
                try {
                    expTime = checkExposureTime(file[i]);
                } catch (MetadataException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ImageProcessingException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            set.setExposure(i, expTime);
            if (expTime > 0) {
                status = true;
            }
        }

        icon = new ImageIcon[3];
        for (int i = 0; i < 3; i++) {
            Mat resizedImage = new Mat();
            Size size = new Size(labelA.getWidth(), labelA.getHeight());
            Imgproc.resize(set.getM(i), resizedImage, size);
            String str = "res/resize" + count + i + ".jpg";
            Imgcodecs.imwrite(str, resizedImage);
            icon[i] = new ImageIcon(str);
        }

        labelA.setIcon(icon[0]);
        labelB.setIcon(icon[1]);
        labelC.setIcon(icon[2]);

        if (!extension.equalsIgnoreCase("jpg") || status == false) {
            CheckView checkView = new CheckView();
            checkView.setVisible(true);
        }
        count++;
        textLog.append("LDRI Images Loaded\n");
        textLog.update(textLog.getGraphics());
        System.out.println("LDRI Images Loaded");
    }//GEN-LAST:event_buttonLoadActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
        if (hdri != null) {
            File file = showSaveDialog();
            Imgcodecs.imwrite(file.getAbsolutePath() + ".jpg", hdri);
            JOptionPane.showMessageDialog(null, "HDRI Image has been successfuly saved!", "Information!", JOptionPane.INFORMATION_MESSAGE);

            for (int i = 0; i < count; i++) {
                for (int j = 0; j < 3; j++) {
                    File temp = new File("res/resize" + i + j + ".jpg");
                    temp.delete();
                }
            }
            File temp = new File("res/result.jpg");
            temp.delete();
            reset();
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonCRFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCRFActionPerformed
        // TODO add your handling code here:
        if (camera != null) {
            camera.drawCRF();
        } else {
            JOptionPane.showMessageDialog(null, "Oops.. Something Wrong!\nTry to create HDR Image first!", "Warning!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonCRFActionPerformed

    private void sliderBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrightnessStateChanged
        // TODO add your handling code here:
        //System.out.println(sliderBrightness.getValue());
    }//GEN-LAST:event_sliderBrightnessStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainView().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCRF;
    private javax.swing.JButton buttonCreate;
    private javax.swing.JButton buttonLoad;
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    protected static javax.swing.JLabel labelA;
    protected static javax.swing.JLabel labelB;
    protected static javax.swing.JLabel labelC;
    private javax.swing.JLabel labelHDRI;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSlider sliderBrightness;
    private javax.swing.JTextArea textLog;
    // End of variables declaration//GEN-END:variables
}
